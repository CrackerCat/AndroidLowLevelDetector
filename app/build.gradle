apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion androidBuild.compileSdkVersion
    buildToolsVersion androidBuild.buildToolsVersion

    defaultConfig {
        applicationId 'net.imknown.android.forefrontinfo'

        manifestPlaceholders = [appName: '@string/app_name']

        // setProperty('archivesBaseName', 'lld')
        archivesBaseName = 'lld'

        versionCode androidBuild.versionCode
        versionName androidBuild.versionName

        minSdkVersion androidBuild.minSdkVersion
        targetSdkVersion androidBuild.targetSdkVersion

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        resConfigs 'zh-rCN', 'fr-rFR'
    }

    signingConfigs {
        release {
            storeFile file(keysConfig.release.storeFile)
            storePassword keysConfig.release.storePassword
            keyAlias keysConfig.release.keyAlias
            keyPassword keysConfig.release.keyPassword
        }

        debug {
            storeFile file(keysConfig.debug.storeFile)
            storePassword keysConfig.debug.storePassword
            keyAlias keysConfig.debug.keyAlias
            keyPassword keysConfig.debug.keyPassword
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true

            signingConfig signingConfigs.release

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro', 'proguard-gson-rules.pro'
        }

        debug {
            debuggable true
            jniDebuggable true

            signingConfig signingConfigs.debug

            applicationIdSuffix '.debug'
        }
    }

    def version = 'version'
    flavorDimensions version

    productFlavors {
        // stable
        master {
            dimension version
        }

        // beta
        develop {
            dimension version

            manifestPlaceholders = [appName: '@string/app_beta_name']

            versionCode androidBuild.versionBetaCode
            versionName androidBuild.versionBetaName
            versionNameSuffix "-beta$androidBuild.versionBetaIteration"
        }
    }

    applicationVariants.all { variant ->
        if (buildType.name == 'debug') {
            setAppBetaName(variant)
        }

        renameApk(variant)
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    // https://kotlinlang.org/docs/tutorials/android-plugin.html
    // androidExtensions {
    //     experimental = true
    // }
}

// region [Set AppName]
private static void setAppBetaName(variant) {
    def appName
    def flavorInfix
    def flavorName = variant.flavorName
    if (flavorName == 'master') {
        appName = '@string/app_debug_name'
        flavorInfix = ''
    } else if (flavorName == 'develop') {
        appName = '@string/app_beta_debug_name'
        flavorInfix = " ${capFirstLetter('beta')}"
    } else {
        appName = ''
        flavorInfix = ''
    }

    variant.getMergedFlavor().manifestPlaceholders = [appName: appName]
    variant.resValue 'string', 'leak_canary_display_activity_label', "LLD${flavorInfix} Leaks"
}

private static capFirstLetter(String flavor) {
    flavor.substring(0, 1).toUpperCase(Locale.US) + flavor.substring(1)
}
// endregion [Set AppName]

// region [Rename APK]
private renameApk(variant) {
    def currentTaskNames = gradle.startParameter.taskNames

    def hasTaskName = currentTaskNames.size != 1
    if (hasTaskName) {
        return
    }

    def flavorName = variant.flavorName
    def buildTypeName = variant.buildType.name

    def currentTaskName = currentTaskNames[0]
    def currentTaskNameLower = currentTaskName.toLowerCase(Locale.US)
    def isNotAssemble = !currentTaskNameLower.contains("assemble$flavorName$buildTypeName")
    def isNotBundle = !currentTaskNameLower.contains("bundle$flavorName$buildTypeName")
    if (isNotAssemble && isNotBundle) {
        // TODO: In fact, there are many tasks should be considered here,
        // TODO: such as 'build', etc. .
        return
    }

    def currentGitBranchName = getCurrentGitBranchName()
    if (!currentTaskNameLower.contains(currentGitBranchName)) {
        ant.fail("Task '$currentTaskName' should not use Git branch '$currentGitBranchName'.")
    }

    if (buildTypeName == 'debug') {
        return
    }

    variant.outputs.all { output ->
        // TODO: Rename Aab

        outputFileName = getRenamedApkName(variant)
        println "OutputFileName: $outputFileName"
    }
}

private getRenamedApkName(variant) {
    def versionCode = variant.versionCode
    def versionName = variant.versionName
    def currentDate = getCurrentDate()
    def currentGitBranchName = getCurrentGitBranchName()
    def flavorName = variant.flavorName
    def buildTypeName = variant.buildType.name

    "${archivesBaseName}_$versionName($versionCode)_$currentDate" +
            "_${currentGitBranchName}_${flavorName}_$buildTypeName" +
            ".apk"
}

import java.text.SimpleDateFormat

private static getCurrentDate() {
    new SimpleDateFormat("yyyy-MM-dd-HH-mm", Locale.US).format(new Date())
}

private static getCurrentGitBranchName() {
    def branch = ""
    def process = "git rev-parse --abbrev-ref HEAD".execute()
    process.in.eachLine { line -> branch = line }
    process.err.eachLine { line -> println line }
    process.waitFor()

    branch
}
// endregion [Rename APK]

apply from: "$rootDir/gradle/dependencies.gradle"
